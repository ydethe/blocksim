
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/plot_filtering.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_plot_filtering.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_plot_filtering.py:


FIR filtering
=============

.. GENERATED FROM PYTHON SOURCE LINES 7-9

Main libraries import
---------------------

.. GENERATED FROM PYTHON SOURCE LINES 9-14

.. code-block:: default


    import numpy as np
    from numpy import pi, exp
    from matplotlib import pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 15-19

Definition of the filter
------------------------
We define a FIR pass-band filter between f1 (Hz) and f2 (Hz)
A Chebychev window is applied to lower the side-lobes

.. GENERATED FROM PYTHON SOURCE LINES 19-39

.. code-block:: default


    from blocksim.dsp.DSPFilter import BandpassDSPFilter
    from blocksim.graphics import plotBode
    from blocksim.Simulation import Simulation

    sim = Simulation()

    fs = 200
    f1 = 10
    f2 = 30
    filt = BandpassDSPFilter(
        name="filter",
        f_low=f1,
        f_high=f2,
        samplingPeriod=1 / fs,
        numtaps=256,
        win=("chebwin", -60),
    )
    sim.addComputer(filt)








.. GENERATED FROM PYTHON SOURCE LINES 40-41

We plot the Bode diagram

.. GENERATED FROM PYTHON SOURCE LINES 41-48

.. code-block:: default


    fig = plt.figure()
    axe_amp = fig.add_subplot(211)
    axe_pha = fig.add_subplot(212, sharex=axe_amp)

    plotBode(filt, axe_amp, axe_pha)




.. image-sg:: /examples/images/sphx_glr_plot_filtering_001.png
   :alt: plot filtering
   :srcset: /examples/images/sphx_glr_plot_filtering_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (<AxesSubplot:ylabel='Ampliude (dB)'>, <AxesSubplot:xlabel='Frequency (Hz)', ylabel='Phase (deg)'>)



.. GENERATED FROM PYTHON SOURCE LINES 49-52

Application of the filter
-------------------------
We construct s1 as a signal with f0 and 3*f0 frequencies

.. GENERATED FROM PYTHON SOURCE LINES 52-63

.. code-block:: default


    from blocksim.graphics import plotDSPLine
    from blocksim.dsp.DSPSignal import DSPSignal

    f0 = 20
    ns = 200
    t1 = np.arange(ns) / fs
    x1 = exp(1j * 2 * pi * f0 * t1) + exp(1j * 2 * pi * 3 * f0 * t1)
    s1 = DSPSignal(name="s1", samplingStart=0, samplingPeriod=1 / fs, y_serie=x1)
    sim.addComputer(s1)








.. GENERATED FROM PYTHON SOURCE LINES 64-65

s2 is the expected signal at the output of the filter

.. GENERATED FROM PYTHON SOURCE LINES 65-69

.. code-block:: default


    x2 = exp(1j * 2 * pi * f0 * t1)
    s2 = DSPSignal(name="s2", samplingStart=0, samplingPeriod=1 / fs, y_serie=x2)








.. GENERATED FROM PYTHON SOURCE LINES 70-71

We simulate the setup

.. GENERATED FROM PYTHON SOURCE LINES 71-79

.. code-block:: default


    sim.connect("s1.setpoint", "filter.unfilt")

    tps = s1.generateXSerie()
    sim.simulate(tps, progress_bar=False)
    log = sim.getLogger()
    y = DSPSignal.fromLogger(name="filt", log=log, param="filter_filt_sample")








.. GENERATED FROM PYTHON SOURCE LINES 80-81

y has to be

.. GENERATED FROM PYTHON SOURCE LINES 81-84

.. code-block:: default


    y = y.forceSamplingStart(-filt.getTransientPhaseDuration())








.. GENERATED FROM PYTHON SOURCE LINES 85-86

We plot s2 and y

.. GENERATED FROM PYTHON SOURCE LINES 86-95

.. code-block:: default


    fig = plt.figure()
    axe = fig.add_subplot(111)

    plotDSPLine(y, axe, label="Output (y)")
    plotDSPLine(s2, axe, label="Expected (s2)")
    axe.legend()

    plt.show()



.. image-sg:: /examples/images/sphx_glr_plot_filtering_002.png
   :alt: plot filtering
   :srcset: /examples/images/sphx_glr_plot_filtering_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.215 seconds)


.. _sphx_glr_download_examples_plot_filtering.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_filtering.py <plot_filtering.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_filtering.ipynb <plot_filtering.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
