
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/plot_freq_tracking.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_plot_freq_tracking.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_plot_freq_tracking.py:


Frequency tracking
==================
This example shows how to use a Kalman filter to estimate the frequencies
present in a signal.

.. GENERATED FROM PYTHON SOURCE LINES 8-17

.. code-block:: default

    import numpy as np


    fs = 20
    dt = 1.0 / fs
    f1 = 3
    f2 = 10
    tau = 12








.. GENERATED FROM PYTHON SOURCE LINES 18-19

Generation of a chirp with :class:`blocksim.dsp.DSPSignal.DSPSignal.fromLinearFM`

.. GENERATED FROM PYTHON SOURCE LINES 19-28

.. code-block:: default


    from blocksim.dsp.DSPSignal import DSPSignal

    chirp = DSPSignal.fromLinearFM(
        "sig", samplingStart=0, samplingPeriod=dt, tau=tau, fstart=f1, fend=f2
    )
    t = chirp.generateXSerie()
    fchirp = (1 - t / tau) * f1 + t / tau * f2








.. GENERATED FROM PYTHON SOURCE LINES 29-32

Generation of a jammer after tau/2
The jammer emits a pure sinusoid at frequency f2. So this is a special case
of a chirp with zero bandwith

.. GENERATED FROM PYTHON SOURCE LINES 32-36

.. code-block:: default

    jammer = DSPSignal.fromLinearFM(
        "jam", samplingStart=tau / 2, samplingPeriod=dt, tau=tau / 2, fstart=f2, fend=f2
    )








.. GENERATED FROM PYTHON SOURCE LINES 37-40

The test signal is the superposition of the chirp and the jammer,
wiht extra margins,
and with some noise added

.. GENERATED FROM PYTHON SOURCE LINES 40-51

.. code-block:: default

    sig = (
        (chirp + jammer)
        .resample(
            samplingStart=t[0] - 1,
            samplingPeriod=dt,
            samplingStop=t[-1] + 1,
            zero_padding=True,
        )
        .applyGaussianNoise(0.5)
    )








.. GENERATED FROM PYTHON SOURCE LINES 52-53

We configure the frequency estimator :class:`blocksim.control.Estimator.SpectrumEstimator`

.. GENERATED FROM PYTHON SOURCE LINES 53-72

.. code-block:: default


    from blocksim.control.Estimator import SpectrumEstimator

    tracks = np.arange(0, 20, 0.5) / fs
    nb_tracks = len(tracks)

    X = np.zeros(nb_tracks, dtype=np.complex128)
    kal = SpectrumEstimator(
        name="kal",
        dt=dt,
        shape_cmd=(1),
        snames_output=["x_kal"],
        snames_state=["x_%i_est" % i for i in range(nb_tracks)],
        tracks=tracks * fs,
    )
    kal.matQ = np.eye(nb_tracks) / 10
    kal.matR = np.eye(1) / 10
    kal.setInitialStateForOutput(X, "state")








.. GENERATED FROM PYTHON SOURCE LINES 73-74

We define the simulation

.. GENERATED FROM PYTHON SOURCE LINES 74-91

.. code-block:: default


    from blocksim.control.SetPoint import Step
    from blocksim.Simulation import Simulation

    ctrl = Step("ctrl", snames=["u"], cons=np.zeros(1))

    sim = Simulation()

    sim.addComputer(ctrl)
    sim.addComputer(sig)
    sim.addComputer(kal)

    sim.connect("sig.setpoint", "kal.measurement")
    sim.connect("ctrl.setpoint", "kal.command")

    sim.simulate(sig.generateXSerie(), progress_bar=False)








.. GENERATED FROM PYTHON SOURCE LINES 92-95

We plot the spectrogram, which is computed by :class:`blocksim.control.Estimator.SpectrumEstimator.getSpectrogram`
The spectrogram is an instance of :class:`blocksim.dsp.DSPSpectrogram.DSPSpectrogram`
It has a method plot which allows to visualize the spectrogram

.. GENERATED FROM PYTHON SOURCE LINES 95-116

.. code-block:: default


    log = sim.getLogger()
    spg = kal.getSpectrogram(log)

    from blocksim.graphics import plotSpectrogram
    import matplotlib.pyplot as plt

    fig = plt.figure()
    axe = fig.add_subplot(111)
    plotSpectrogram(spg, axe)
    axe.plot(
        t,
        fchirp,
        linewidth=2,
        color="white",
        linestyle="--",
    )
    axe.set_xlabel("Time (s)")
    axe.set_ylabel("Frequency (Hz)")

    plt.show()



.. image-sg:: /examples/images/sphx_glr_plot_freq_tracking_001.png
   :alt: plot freq tracking
   :srcset: /examples/images/sphx_glr_plot_freq_tracking_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.915 seconds)


.. _sphx_glr_download_examples_plot_freq_tracking.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_freq_tracking.py <plot_freq_tracking.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_freq_tracking.ipynb <plot_freq_tracking.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
