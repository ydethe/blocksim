
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/plot_radar.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_plot_radar.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_plot_radar.py:


Radar proccessing
===================

.. GENERATED FROM PYTHON SOURCE LINES 8-10

Creation of the signal
----------------------

.. GENERATED FROM PYTHON SOURCE LINES 10-14

.. code-block:: default


    import numpy as np
    from blocksim.dsp.DSPSignal import DSPSignal








.. GENERATED FROM PYTHON SOURCE LINES 15-16

Reference chirp generation

.. GENERATED FROM PYTHON SOURCE LINES 16-34

.. code-block:: default


    tau = 10e-6  # Duration of one pulse
    bp = 5e6  # Bandwidth
    fs = bp * 3  # Sampling frequency
    eta = 0.1  # Duty cycle of repetitions
    nrep = 50  # Number of repetitions
    fdop = 1e3  # Doppler frequency
    wl = 0.2  # wavelength

    rep = DSPSignal.fromLinearFM(
        name="rep",
        samplingStart=0,
        samplingPeriod=1 / fs,
        tau=tau,
        fstart=-bp / 2,
        fend=bp / 2,
    )








.. GENERATED FROM PYTHON SOURCE LINES 35-36

Noisy received signal with nrep repetitions

.. GENERATED FROM PYTHON SOURCE LINES 36-50

.. code-block:: default


    ns_rep = len(rep)

    ns = int(ns_rep / eta)
    tps = np.arange(nrep * ns) / fs
    y_sig = np.zeros(nrep * ns, dtype=np.complex128)
    for k in range(nrep):
        y_sig[k * ns : k * ns + ns_rep] = rep.y_serie * k
    sig = (
        DSPSignal.fromTimeAndSamples(name="sig", tps=tps, y_serie=y_sig)
        .applyDopplerFrequency(fdop=fdop)
        .applyGaussianNoise(pwr=5)
    )








.. GENERATED FROM PYTHON SOURCE LINES 51-53

Processing
----------

.. GENERATED FROM PYTHON SOURCE LINES 55-56

Definitions

.. GENERATED FROM PYTHON SOURCE LINES 56-67

.. code-block:: default


    from blocksim.constants import c

    Tr = tau / eta  # Repetition period
    Tana = nrep * Tr  # Analysis duration
    Rf = 1 / Tana  # Frequency resolution
    Rv = Rf * wl  # Velocity resolution
    Rd = c / bp * 1.4  # Distance resolution
    vamb = wl / 2 / Tr  # Size of analyse window in the velocity axis
    damb = 2 * tau * c  # Size of analyse window in the distance axis








.. GENERATED FROM PYTHON SOURCE LINES 68-69

Analysis of the received signal

.. GENERATED FROM PYTHON SOURCE LINES 69-90

.. code-block:: default


    from blocksim.dsp import analyse_DV

    spg = analyse_DV(
        wavelength=wl,
        period=Tr,
        dist0=tau * c,
        damb=damb,
        vrad0=-wl * fdop,
        vamb=vamb,
        seq=rep,
        rxsig=sig,
        nv=100,
        corr_window="hamming",
        progress_bar=False,
    )

    trf = DSPSignal.to_db_lim(-80)
    (peak,) = spg.findPeaksWithTransform(transform=trf, nb_peaks=1)
    print(peak)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Peak(Radial Velocity (-200.0 m/s delta)=0.132 m/s, Delay=9.93 Âµs, value=27.9)




.. GENERATED FROM PYTHON SOURCE LINES 91-93

Plotting
--------

.. GENERATED FROM PYTHON SOURCE LINES 93-109

.. code-block:: default


    from matplotlib import pyplot as plt
    from blocksim.graphics import plotSpectrogram

    fig = plt.figure()
    axe = fig.add_subplot(111)
    plotSpectrogram(
        spg,
        axe,
        transform=trf,
        search_fig=False,
        find_peaks=1,
    )
    axe.set_title("Power (dB)")

    plt.show()



.. image-sg:: /examples/images/sphx_glr_plot_radar_001.png
   :alt: Power (dB)
   :srcset: /examples/images/sphx_glr_plot_radar_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.459 seconds)


.. _sphx_glr_download_examples_plot_radar.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_radar.py <plot_radar.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_radar.ipynb <plot_radar.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
