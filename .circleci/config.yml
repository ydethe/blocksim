# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.5.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-test: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.10.2 container
    # Change the version below to your required version of python
    docker:
      - image: ydethe/blocksim
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          name: Run tests
          # This assumes pytest is installed via the install-package step above
          command: |
            python3 setup.py develop
            python3 -m pytest --mpl --mpl-generate-summary=html --mpl-baseline-path=tests/baseline --mpl-results-path=results --cov blocksim tests --doctest-modules blocksim
            python3 setup.py doc
            mv docs/_build/html htmldoc
            codecov
            coverage html
            python3 setup.py sdist
            pip3 wheel --no-index --no-deps --wheel-dir dist dist/*.tar.gz
      - store_artifacts:
          path: results
          destination: results
      - store_artifacts:
          path: htmlcov
          destination: htmlcov
      - store_artifacts:
          path: htmldoc
          destination: htmldoc
      - store_artifacts:
          path: dist
          destination: dist
  publish_rtd:
    steps:
      - run:
            name: Publish RTD
            command: |
              'curl --insecure -d "" -X POST -H "Authorization: Token $RTD_TOKEN" https://readthedocs.org/api/v3/projects/blocksim/versions/latest/builds/'
              'curl --insecure -X PATCH -H "Authorization: Token $RTD_TOKEN" -H "Content-Type: application/json" -d "{\"active\": true,\"hidden\": false}" https://readthedocs.org/api/v3/projects/blocksim/versions/$CI_COMMIT_TAG'
  publish_pypi:
    steps:
      - run:
            name: Publish PyPi
            command: twine upload dist/*

# https://circleci.com/docs/2.0/workflows/#executing-workflows-for-a-git-tag
workflows:
  version: 2
  untagged-build:
    jobs:
      - build-and-test
  tagged-build:
    jobs:
      - build-and-test:
          filters:
            tags:
              only: /^v.*/
      - publish_rtd:
          requires:
            - build-and-test
          filters:
            tags:
              only: /^v.*/
      - publish_pypi:
          requires:
            - build-and-test
          filters:
            tags:
              only: /^v.*/
